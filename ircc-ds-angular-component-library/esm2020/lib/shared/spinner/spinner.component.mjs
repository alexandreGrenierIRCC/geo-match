import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@ngx-translate/core";
import * as i2 from "@angular/common";
import * as i3 from "../icon/icon.component";
export const SPINNER_LABELS_EN = ['Loading', 'Success', 'Error'];
export const SPINNER_LABELS_FR = ['Chargement', 'Succès', 'Erreur'];
export var SpinnerType;
(function (SpinnerType) {
    SpinnerType["active"] = "active";
    SpinnerType["success"] = "success";
    SpinnerType["critical"] = "critical";
})(SpinnerType || (SpinnerType = {}));
export class SpinnerComponent {
    constructor(translate) {
        this.translate = translate;
        this.text = [];
        this.config = {
            id: ''
        };
        this.id = '';
    }
    ngOnInit() {
        //set config from individual options, if present
        if (this.id !== '')
            this.config.id = this.id;
        if (this.type)
            this.config.type = this.type;
        if (this.size)
            this.config.size = this.size;
        if (this.orientation)
            this.config.orientation = this.orientation;
        if (this.label !== '')
            this.config.label = this.label;
        if (this.description !== '')
            this.config.description = this.description;
        if (!this.config.orientation)
            this.config.orientation = 'horizontal';
        if (!this.config.size)
            this.config.size = 'large';
        this.removeVertical();
        this.setTypeTitle();
        this.translate.onLangChange.subscribe(() => {
            this.setTypeTitle();
        });
    }
    ngOnChanges() {
        this.setTypeTitle();
    }
    setTypeTitle() {
        if (this.translate.currentLang === 'en' ||
            this.translate.currentLang === 'en-US') {
            this.text = SPINNER_LABELS_EN;
        }
        else {
            this.text = SPINNER_LABELS_FR;
        }
    }
    removeVertical() {
        if (this.config.size !== 'large' &&
            this.config.orientation === 'vertical') {
            this.config.orientation = 'horizontal';
        }
    }
    getSuccessTitle() {
        return (this.config.label || this.config.description) ? '' : this.text[1];
    }
    getErrorTitle() {
        return (this.config.label || this.config.description) ? '' : this.text[2];
    }
}
SpinnerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: SpinnerComponent, deps: [{ token: i1.TranslateService }], target: i0.ɵɵFactoryTarget.Component });
SpinnerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.2.12", type: SpinnerComponent, selector: "ircc-cl-lib-spinner", inputs: { config: "config", id: "id", type: "type", size: "size", orientation: "orientation", label: "label", description: "description" }, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"{{ config.size }} {{ config.orientation }}\"\n  id=\"{{ config.id }}\"\n  aria-live=\"polite\"\n>\n  <div\n    class=\"spinner-container\"\n    [ngClass]=\"{\n      active: config.type === 'active',\n      success: config.type === 'success',\n      critical: config.type === 'critical'\n    }\"\n  >\n    <ng-container [ngSwitch]=\"config.type\">\n      <div\n        *ngSwitchCase=\"'success'\"\n        class=\"container\"\n      >\n        <div class=\"icon-div\">\n          <ircc-cl-lib-icon\n            [config]=\"{\n              FA_keywords: 'fa-check fa-regular',\n              ariaLabel: getSuccessTitle()\n            }\"\n            class=\"spinner-icon\"\n          ></ircc-cl-lib-icon>\n        </div>\n        <div class=\"text\">\n          <div\n            class=\"label\"\n            [innerHTML]=\"config.label\"\n          ></div>\n          <div\n            *ngIf=\"config.size === 'large'\"\n            class=\"desc\"\n            [innerHTML]=\"config.description\"\n          ></div>\n        </div>\n      </div>\n      <div\n        *ngSwitchCase=\"'critical'\"\n        class=\"container\"\n      >\n        <div class=\"icon-div\">\n          <ircc-cl-lib-icon\n            [config]=\"{\n              FA_keywords: 'fa-exclamation fa-regular',\n              ariaLabel: getErrorTitle()\n            }\"\n            class=\"spinner-icon\"\n          ></ircc-cl-lib-icon>\n        </div>\n        <div class=\"text\">\n          <div\n            class=\"label\"\n            [innerHTML]=\"config.label\"\n          ></div>\n          <div\n            *ngIf=\"config.size === 'large'\"\n            class=\"desc\"\n            [innerHTML]=\"config.description\"\n          ></div>\n        </div>\n      </div>\n      <div\n        *ngSwitchDefault\n        class=\"container\"\n      >\n        <div class=\"icon-div\">\n          <img\n            src=\"./src/assets/icons/spinner-states.svg\"\n            [attr.alt]=\"config.label || config.description ? '' : text[0]\"\n            class=\"animated-icon loading-icon\"\n          />\n        </div>\n        <div class=\"text\">\n          <div\n            class=\"label\"\n            [innerHTML]=\"config.label\"\n          ></div>\n          <div\n            *ngIf=\"config.size === 'large'\"\n            class=\"desc\"\n            [innerHTML]=\"config.description\"\n          ></div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n", dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "component", type: i3.IconComponent, selector: "ircc-cl-lib-icon", inputs: ["config", "ariaLabel", "FA_keywords", "size"] }], preserveWhitespaces: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: SpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ircc-cl-lib-spinner', template: "<div\n  class=\"{{ config.size }} {{ config.orientation }}\"\n  id=\"{{ config.id }}\"\n  aria-live=\"polite\"\n>\n  <div\n    class=\"spinner-container\"\n    [ngClass]=\"{\n      active: config.type === 'active',\n      success: config.type === 'success',\n      critical: config.type === 'critical'\n    }\"\n  >\n    <ng-container [ngSwitch]=\"config.type\">\n      <div\n        *ngSwitchCase=\"'success'\"\n        class=\"container\"\n      >\n        <div class=\"icon-div\">\n          <ircc-cl-lib-icon\n            [config]=\"{\n              FA_keywords: 'fa-check fa-regular',\n              ariaLabel: getSuccessTitle()\n            }\"\n            class=\"spinner-icon\"\n          ></ircc-cl-lib-icon>\n        </div>\n        <div class=\"text\">\n          <div\n            class=\"label\"\n            [innerHTML]=\"config.label\"\n          ></div>\n          <div\n            *ngIf=\"config.size === 'large'\"\n            class=\"desc\"\n            [innerHTML]=\"config.description\"\n          ></div>\n        </div>\n      </div>\n      <div\n        *ngSwitchCase=\"'critical'\"\n        class=\"container\"\n      >\n        <div class=\"icon-div\">\n          <ircc-cl-lib-icon\n            [config]=\"{\n              FA_keywords: 'fa-exclamation fa-regular',\n              ariaLabel: getErrorTitle()\n            }\"\n            class=\"spinner-icon\"\n          ></ircc-cl-lib-icon>\n        </div>\n        <div class=\"text\">\n          <div\n            class=\"label\"\n            [innerHTML]=\"config.label\"\n          ></div>\n          <div\n            *ngIf=\"config.size === 'large'\"\n            class=\"desc\"\n            [innerHTML]=\"config.description\"\n          ></div>\n        </div>\n      </div>\n      <div\n        *ngSwitchDefault\n        class=\"container\"\n      >\n        <div class=\"icon-div\">\n          <img\n            src=\"./src/assets/icons/spinner-states.svg\"\n            [attr.alt]=\"config.label || config.description ? '' : text[0]\"\n            class=\"animated-icon loading-icon\"\n          />\n        </div>\n        <div class=\"text\">\n          <div\n            class=\"label\"\n            [innerHTML]=\"config.label\"\n          ></div>\n          <div\n            *ngIf=\"config.size === 'large'\"\n            class=\"desc\"\n            [innerHTML]=\"config.description\"\n          ></div>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i1.TranslateService }]; }, propDecorators: { config: [{
                type: Input
            }], id: [{
                type: Input
            }], type: [{
                type: Input
            }], size: [{
                type: Input
            }], orientation: [{
                type: Input
            }], label: [{
                type: Input
            }], description: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9saWIvc2hhcmVkL3NwaW5uZXIvc3Bpbm5lci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9jb21wb25lbnQtbGliL3NyYy9saWIvc2hhcmVkL3NwaW5uZXIvc3Bpbm5lci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFPekQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsWUFBWSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUVwRSxNQUFNLENBQU4sSUFBWSxXQUlYO0FBSkQsV0FBWSxXQUFXO0lBQ3JCLGdDQUFpQixDQUFBO0lBQ2pCLGtDQUFtQixDQUFBO0lBQ25CLG9DQUFxQixDQUFBO0FBQ3ZCLENBQUMsRUFKVyxXQUFXLEtBQVgsV0FBVyxRQUl0QjtBQWFELE1BQU0sT0FBTyxnQkFBZ0I7SUFhM0IsWUFBb0IsU0FBMkI7UUFBM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFaL0MsU0FBSSxHQUFhLEVBQUUsQ0FBQztRQUVYLFdBQU0sR0FBbUI7WUFDaEMsRUFBRSxFQUFFLEVBQUU7U0FDUCxDQUFDO1FBQ08sT0FBRSxHQUFHLEVBQUUsQ0FBQztJQU9pQyxDQUFDO0lBRW5ELFFBQVE7UUFDTixnREFBZ0Q7UUFDaEQsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzdDLElBQUksSUFBSSxDQUFDLElBQUk7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bSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSc7XG5pbXBvcnQge1xuICBEU0Z1bGxTaXplcyxcbiAgRFNPcmllbnRhdGlvbnNcbn0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL2NvbnN0YW50cy9qbC1jb21wb25lbnRzLmNvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCBTUElOTkVSX0xBQkVMU19FTiA9IFsnTG9hZGluZycsICdTdWNjZXNzJywgJ0Vycm9yJ107XG5leHBvcnQgY29uc3QgU1BJTk5FUl9MQUJFTFNfRlIgPSBbJ0NoYXJnZW1lbnQnLCAnU3VjY8OocycsICdFcnJldXInXTtcblxuZXhwb3J0IGVudW0gU3Bpbm5lclR5cGUge1xuICBhY3RpdmUgPSAnYWN0aXZlJyxcbiAgc3VjY2VzcyA9ICdzdWNjZXNzJyxcbiAgY3JpdGljYWwgPSAnY3JpdGljYWwnXG59XG5leHBvcnQgaW50ZXJmYWNlIElTcGlubmVyQ29uZmlnIHtcbiAgaWQ6IHN0cmluZztcbiAgdHlwZT86IGtleW9mIHR5cGVvZiBTcGlubmVyVHlwZTtcbiAgc2l6ZT86IGtleW9mIHR5cGVvZiBEU0Z1bGxTaXplcztcbiAgb3JpZW50YXRpb24/OiBrZXlvZiB0eXBlb2YgRFNPcmllbnRhdGlvbnM7XG4gIGxhYmVsPzogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2lyY2MtY2wtbGliLXNwaW5uZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc3Bpbm5lci5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHRleHQ6IHN0cmluZ1tdID0gW107XG5cbiAgQElucHV0KCkgY29uZmlnOiBJU3Bpbm5lckNvbmZpZyA9IHtcbiAgICBpZDogJydcbiAgfTtcbiAgQElucHV0KCkgaWQgPSAnJztcbiAgQElucHV0KCkgdHlwZT86IGtleW9mIHR5cGVvZiBTcGlubmVyVHlwZSB8IFNwaW5uZXJUeXBlO1xuICBASW5wdXQoKSBzaXplPzoga2V5b2YgdHlwZW9mIERTRnVsbFNpemVzIHwgRFNGdWxsU2l6ZXM7XG4gIEBJbnB1dCgpIG9yaWVudGF0aW9uPzoga2V5b2YgdHlwZW9mIERTT3JpZW50YXRpb25zIHwgRFNPcmllbnRhdGlvbnM7XG4gIEBJbnB1dCgpIGxhYmVsPzogJyc7XG4gIEBJbnB1dCgpIGRlc2NyaXB0aW9uPzogJyc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy9zZXQgY29uZmlnIGZyb20gaW5kaXZpZHVhbCBvcHRpb25zLCBpZiBwcmVzZW50XG4gICAgaWYgKHRoaXMuaWQgIT09ICcnKSB0aGlzLmNvbmZpZy5pZCA9IHRoaXMuaWQ7XG4gICAgaWYgKHRoaXMudHlwZSkgdGhpcy5jb25maWcudHlwZSA9IHRoaXMudHlwZTtcbiAgICBpZiAodGhpcy5zaXplKSB0aGlzLmNvbmZpZy5zaXplID0gdGhpcy5zaXplO1xuICAgIGlmICh0aGlzLm9yaWVudGF0aW9uKSB0aGlzLmNvbmZpZy5vcmllbnRhdGlvbiA9IHRoaXMub3JpZW50YXRpb247XG4gICAgaWYgKHRoaXMubGFiZWwgIT09ICcnKSB0aGlzLmNvbmZpZy5sYWJlbCA9IHRoaXMubGFiZWw7XG4gICAgaWYgKHRoaXMuZGVzY3JpcHRpb24gIT09ICcnKSB0aGlzLmNvbmZpZy5kZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb247XG4gICAgXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5vcmllbnRhdGlvbikgdGhpcy5jb25maWcub3JpZW50YXRpb24gPSAnaG9yaXpvbnRhbCc7XG4gICAgaWYgKCF0aGlzLmNvbmZpZy5zaXplKSB0aGlzLmNvbmZpZy5zaXplID0gJ2xhcmdlJztcbiAgICB0aGlzLnJlbW92ZVZlcnRpY2FsKCk7XG5cbiAgICB0aGlzLnNldFR5cGVUaXRsZSgpO1xuICAgIHRoaXMudHJhbnNsYXRlLm9uTGFuZ0NoYW5nZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zZXRUeXBlVGl0bGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIHRoaXMuc2V0VHlwZVRpdGxlKCk7XG4gIH1cblxuICBzZXRUeXBlVGl0bGUoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy50cmFuc2xhdGUuY3VycmVudExhbmcgPT09ICdlbicgfHxcbiAgICAgIHRoaXMudHJhbnNsYXRlLmN1cnJlbnRMYW5nID09PSAnZW4tVVMnXG4gICAgKSB7XG4gICAgICB0aGlzLnRleHQgPSBTUElOTkVSX0xBQkVMU19FTjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZXh0ID0gU1BJTk5FUl9MQUJFTFNfRlI7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlVmVydGljYWwoKSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5jb25maWcuc2l6ZSAhPT0gJ2xhcmdlJyAmJlxuICAgICAgdGhpcy5jb25maWcub3JpZW50YXRpb24gPT09ICd2ZXJ0aWNhbCdcbiAgICApIHtcbiAgICAgIHRoaXMuY29uZmlnLm9yaWVudGF0aW9uID0gJ2hvcml6b250YWwnO1xuICAgIH1cbiAgfVxuXG4gIGdldFN1Y2Nlc3NUaXRsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAodGhpcy5jb25maWcubGFiZWwgfHwgdGhpcy5jb25maWcuZGVzY3JpcHRpb24pID8gJycgOiB0aGlzLnRleHRbMV07XG4gIH1cbiAgZ2V0RXJyb3JUaXRsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiAodGhpcy5jb25maWcubGFiZWwgfHwgdGhpcy5jb25maWcuZGVzY3JpcHRpb24pID8gJycgOiB0aGlzLnRleHRbMl07XG4gIH1cbn1cbiIsIjxkaXZcbiAgY2xhc3M9XCJ7eyBjb25maWcuc2l6ZSB9fSB7eyBjb25maWcub3JpZW50YXRpb24gfX1cIlxuICBpZD1cInt7IGNvbmZpZy5pZCB9fVwiXG4gIGFyaWEtbGl2ZT1cInBvbGl0ZVwiXG4+XG4gIDxkaXZcbiAgICBjbGFzcz1cInNwaW5uZXItY29udGFpbmVyXCJcbiAgICBbbmdDbGFzc109XCJ7XG4gICAgICBhY3RpdmU6IGNvbmZpZy50eXBlID09PSAnYWN0aXZlJyxcbiAgICAgIHN1Y2Nlc3M6IGNvbmZpZy50eXBlID09PSAnc3VjY2VzcycsXG4gICAgICBjcml0aWNhbDogY29uZmlnLnR5cGUgPT09ICdjcml0aWNhbCdcbiAgICB9XCJcbiAgPlxuICAgIDxuZy1jb250YWluZXIgW25nU3dpdGNoXT1cImNvbmZpZy50eXBlXCI+XG4gICAgICA8ZGl2XG4gICAgICAgICpuZ1N3aXRjaENhc2U9XCInc3VjY2VzcydcIlxuICAgICAgICBjbGFzcz1cImNvbnRhaW5lclwiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLWRpdlwiPlxuICAgICAgICAgIDxpcmNjLWNsLWxpYi1pY29uXG4gICAgICAgICAgICBbY29uZmlnXT1cIntcbiAgICAgICAgICAgICAgRkFfa2V5d29yZHM6ICdmYS1jaGVjayBmYS1yZWd1bGFyJyxcbiAgICAgICAgICAgICAgYXJpYUxhYmVsOiBnZXRTdWNjZXNzVGl0bGUoKVxuICAgICAgICAgICAgfVwiXG4gICAgICAgICAgICBjbGFzcz1cInNwaW5uZXItaWNvblwiXG4gICAgICAgICAgPjwvaXJjYy1jbC1saWItaWNvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0XCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJsYWJlbFwiXG4gICAgICAgICAgICBbaW5uZXJIVE1MXT1cImNvbmZpZy5sYWJlbFwiXG4gICAgICAgICAgPjwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICpuZ0lmPVwiY29uZmlnLnNpemUgPT09ICdsYXJnZSdcIlxuICAgICAgICAgICAgY2xhc3M9XCJkZXNjXCJcbiAgICAgICAgICAgIFtpbm5lckhUTUxdPVwiY29uZmlnLmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICA+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2XG4gICAgICAgICpuZ1N3aXRjaENhc2U9XCInY3JpdGljYWwnXCJcbiAgICAgICAgY2xhc3M9XCJjb250YWluZXJcIlxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbi1kaXZcIj5cbiAgICAgICAgICA8aXJjYy1jbC1saWItaWNvblxuICAgICAgICAgICAgW2NvbmZpZ109XCJ7XG4gICAgICAgICAgICAgIEZBX2tleXdvcmRzOiAnZmEtZXhjbGFtYXRpb24gZmEtcmVndWxhcicsXG4gICAgICAgICAgICAgIGFyaWFMYWJlbDogZ2V0RXJyb3JUaXRsZSgpXG4gICAgICAgICAgICB9XCJcbiAgICAgICAgICAgIGNsYXNzPVwic3Bpbm5lci1pY29uXCJcbiAgICAgICAgICA+PC9pcmNjLWNsLWxpYi1pY29uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHRcIj5cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzcz1cImxhYmVsXCJcbiAgICAgICAgICAgIFtpbm5lckhUTUxdPVwiY29uZmlnLmxhYmVsXCJcbiAgICAgICAgICA+PC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgKm5nSWY9XCJjb25maWcuc2l6ZSA9PT0gJ2xhcmdlJ1wiXG4gICAgICAgICAgICBjbGFzcz1cImRlc2NcIlxuICAgICAgICAgICAgW2lubmVySFRNTF09XCJjb25maWcuZGVzY3JpcHRpb25cIlxuICAgICAgICAgID48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXZcbiAgICAgICAgKm5nU3dpdGNoRGVmYXVsdFxuICAgICAgICBjbGFzcz1cImNvbnRhaW5lclwiXG4gICAgICA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpY29uLWRpdlwiPlxuICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgIHNyYz1cIi4vc3JjL2Fzc2V0cy9pY29ucy9zcGlubmVyLXN0YXRlcy5zdmdcIlxuICAgICAgICAgICAgW2F0dHIuYWx0XT1cImNvbmZpZy5sYWJlbCB8fCBjb25maWcuZGVzY3JpcHRpb24gPyAnJyA6IHRleHRbMF1cIlxuICAgICAgICAgICAgY2xhc3M9XCJhbmltYXRlZC1pY29uIGxvYWRpbmctaWNvblwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0XCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3M9XCJsYWJlbFwiXG4gICAgICAgICAgICBbaW5uZXJIVE1MXT1cImNvbmZpZy5sYWJlbFwiXG4gICAgICAgICAgPjwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICpuZ0lmPVwiY29uZmlnLnNpemUgPT09ICdsYXJnZSdcIlxuICAgICAgICAgICAgY2xhc3M9XCJkZXNjXCJcbiAgICAgICAgICAgIFtpbm5lckhUTUxdPVwiY29uZmlnLmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICA+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXX0=